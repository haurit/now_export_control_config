<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script/>
        <description/>
        <direct>false</direct>
        <endpoint/>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">

	<head>
		<style>
			body {
				font-family: Arial, sans-serif;
				margin: 20px;
			}

			h1 {
				//color: #000;
			}

			h2 {
				//color: #000;
			}

			p {
				//color: #000;
			}

			code {
				background-color: #f5f5f5;
				padding: 2px 4px;
				color: #333;
				border-radius: 3px;
				font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
			}
		</style>
	</head>

	<body>
		<h1>Export Control Configuration</h1>
		<p>Welcome to Export Control Configuration - created and maintained by&#160;<a href="mailto:tom@hauri.biz">Tom Hauri</a>.</p>
		<h2>Overview</h2>
		<p>Configure export controls to prevent sensitive data from being extracted from lists using the baseline data classification and JSON .</p>
		<h2>Disclaimer</h2>
		<p>Export Control Configuration is NOT an officially supported ServiceNow product. Export Control Configuration does NOT come with any kind of
			warranty. If you use it, you own it!</p>
		<h2>System Requirements</h2>
		<ul>
			<li>Vancouver or later</li>
			<li>Access to&#160;<a href="https://github.com/haurit/now_export_control_config"
					target="_blank">https://github.com/haurit/now_export_control_config</a></li>
		</ul>
		<h2>License</h2>
		<p>Copyright 2023-2024 by Tom Hauri</p>
		<p>Licensed under the Apache License, Version 2.0 (the "License")</p>
		<p>You may not use Export Control Configuration except in compliance with the License.</p>
		<p>You may obtain a copy of the License at:&#160;<a href="https://www.apache.org/licenses/LICENSE-2.0"
				target="_blank">https://www.apache.org/licenses/LICENSE-2.0</a></p>
		<p>Unless required by applicable law or agreed to in writing, software distributed under the License is
			distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			See the License for the specific language governing permissions and limitations under the License.</p>
		<h2>Release Notes</h2>
		<h3>1.0.0 - 02.2024</h3>
		<ol>
			<li>Initial Release</li>
		</ol>
		<h2>Problem Statement</h2>
		<p>Sometimes sensitive data is required for the daily work but you would like to ensure that it cannot be exported easily to Excel by un-authorized users.</p>
		<h2>Overview</h2>
		<p>
			Export Control Configuration allows you to configure your export controls granularly with optional configuration to grant granular exceptions.
		</p>
		<h2>Prerequisites</h2>
<p>The Compare Tool makes usage of the&#160;<a href="https://www.servicenow.com/community/in-other-news/global-tools-yagusis/ba-p/2714402" target="_blank">Global Tools - YAGUSIS</a>&#160;and&#160;<a href="https://www.servicenow.com/community/in-other-news/json-configuration-manager/ba-p/2708888" target="_blank">JSON Configuration Manager</a>&#160;applications. Ensure that you have successfully installed the applications before doing the manual steps.</p>
		<h2>Installation and usage</h2>
		<ol>
			<li>Create an account on&#160;<a href="https://github.com/" target="_blank">GitHub</a>&#160;- if not done
				already.</li>
			<li>Create a&#160;<a href="https://github.com/settings/tokens" target="_blank">personal access
					token</a>&#160;for your GitHub account.</li>
			<li>Add&#160;<a href="/discovery_credentials_list.do" target="_blank">credentials</a>&#160;to access GitHub
				- use "Basic Auth".</li>
			<li>Fork the repository&#160;<a href="https://github.com/haurit/now_export_control_config"
					target="_blank">https://github.com/haurit/now_export_control_config</a>.</li>
			<li>Go to&#160;<a href="/$studio.do" target="_blank">Studio</a>&#160;and import the Export Control Configuration application
				from source control.</li>
			<li>Manually replace the following code in the&#160;<a href="/now/nav/ui/classic/params/target/sys_ui_context_menu.do%3Fsys_id%3Df13f0041473012003db6d7527c9a71f0" target="_blank">UI Context Menu "Export (XLSX)"</a> <strong>runContextAction</strong> function:&#160;
			<p>Old code:</p>
var exportHandler = new ContextMenuExportHandler(g_list,'unload_excel_xlsx');
exportHandler.exportRecords();
			<p>New code:</p>
			<code>
try {
	var gaExportControlCfg = new GlideAjax('ExportControlConfiguration');
	gaExportControlCfg.addParam('sysparm_name', 'validateList');
	gaExportControlCfg.addParam('sysparm_table', g_list.getTableName());
	gaExportControlCfg.addParam('sysparm_view', g_list.getView());
	gaExportControlCfg.addParam('sysparm_userid', g_user.userID);
	gaExportControlCfg.getXMLWait();
	var sErrorMsg = gaExportControlCfg.getAnswer();
	if (!sErrorMsg) {
		var exportHandler = new ContextMenuExportHandler(g_list, 'unload_excel_xlsx');
		exportHandler.exportRecords();
	} else {
		alert(sErrorMsg);
	} // if error
} catch (oEx) {
	alert('Error during export validation: ' + String(oEx));
} //  end catch
			</code>
			</li>
		</ol>

		<h1>Script Include: global.GlobalTools</h1>
		<h2>nsub</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function substitutes null values in simple types, arrays.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sValue</code>: The value to be checked and possibly substituted
				by&#160;<code>sSubstitute</code>&#160;if
				null.</li>
			<li><code>sSubstitute</code>: The value to use as a substitute if&#160;<code>sValue</code>&#160;is null.
			</li>
			<li><code>sType</code>: (Optional) The type of&#160;<code>sSubstitute</code>&#160;to be returned if
				<code>sValue</code>&#160;is null.
			</li>
			<li><code>sObjKey</code>: (Deprecated) Use&#160;<code>new
					global.GlobalToolsObject().getValue()</code>&#160;instead.
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The&#160;<code>sValue</code>&#160;if not null
			or&#160;<code>sSubstitute</code>&#160;respecting
			the type specified in&#160;<code>sType</code>
		</p>
		<h2>getType</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function determines the type of a given value.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oValue</code>: The value for which you want to determine the type.</li>
			<li><code>bDoNotConvertCase</code>: (Optional) If true, the function returns the type in its original case
				else it's converted to lowercase.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The type of the provided&#160;<code>oValue</code>&#160;as a string.
		</p>
		<h2>isEqual</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function compares two values and returns true if they are the same
			(object
			deep compare, sorts arrays)
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oValue1</code>: The first value.</li>
			<li><code>oValue2</code>: The second value.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;True if&#160;<code>oValue1</code>&#160;and&#160;<code>oValue2</code>&#160;are
			the same, false if
			not.
		</p>
		<h2>encodeNewLineToTag</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function replaces newline characters "\n" in a string with a custom tag
			"!^br^!".
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sValue</code>: The input string containing newline characters.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The&#160;<code>sValue</code>&#160;with newline characters replaced by
			"!^br^!".
		</p>

		<h2>decodeTagToNewLine</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function replaces a custom tag "!^br^!" in a string with newline
			characters
			"\n".
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sValue</code>: The input string containing the "!^br^!" tag.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The&#160;<code>sValue</code>&#160;with the "!^br^!" tag replaced by newline
			characters.
		</p>
		<h2>padNumber</h2>
		<p><strong>Purpose:</strong>&#160;This function ensures a string has a specific length by prefixing zeros (0).
		</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>iNumber</code>: The input&#160;<code>integer</code>&#160;with the actual number.</li>
			<li><code>iDigits</code>: The input&#160;<code>integer</code>&#160;with the desired lenght of the string.
			</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;with the required length.</p>
		<h2>formatBytes</h2>
		<p><strong>Purpose:</strong>&#160;This function formats a number to the correct byte representation.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>iNumber</code>: The input&#160;<code>integer</code>&#160;with the actual number of bytes.</li>
			<li><code>sNotation</code>: (Optional) The string definining the notation to be used: si (base 1000) or iec
				(base 1024) Default: si.</li>
			<li><code>iDecimals</code>: (Optional) The number of decimals to be returned (Default: 2).</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;with the formated bytes value.</p>
		<h2>replacePlaceholders</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function replaces placeholders in a string [field_name] with the
			respective field values from an object or GlideRecord.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sInputValue</code>: The string containing the placeholders.</li>
			<li><code>oRecord</code>: An object or valid GlideRecord where the field values are looked up.</li>
			<li><code>sValue</code>: A value that will replace the&#160;<code>sValue</code>&#160;in the input string.
			</li>
			<li><code>bJSON</code>: If the input string is a JSON string this needs to be set to true.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The input string with all the placeholders replaced with actual values.
		</p>
		<h2>convertUnderscoretoCamelCase</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function replaces _ (underscore) values and puts the string in camel
			case.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sInputValue</code>: The string containing the original value.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The input string in camel case.
		</p>
		<h2>getHTMLDiffFromXML</h2>
		<p><strong>Purpose:</strong>&#160;This function compares two XML strings and returns a HTML string with the
			differences.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sXMLLeft</code>: The string containing the first XML string.</li>
			<li><code>sXMLRight</code>: The string containing the second XML string.</li>
			<li><code>sHeaderLeft</code>: The string containing the left title value.</li>
			<li><code>sHeaderRight</code>: The string containing the right title value.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The HTML string with the differences or&#160;<code>undefined</code>&#160;if
			there was an
			error.</p>
		<h2>scheduleScript</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function schedules the execution of a script include function.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sScriptInclude</code>: The name of the script include.</li>
			<li><code>sFunction</code>: The name of the function to be called within the script include.</li>
			<li><code>iSeconds</code>: The delay in seconds before execution.</li>
			<li><code>aFunctionArgs</code>: An array of arguments to pass to the function.</li>
			<li><code>aClassArgs</code>: An array of arguments to pass to the script include constructor.</li>
			<li><code>sScheduleName</code>: (Optional) The name of the scheduled script.</li>
		</p>

		<h2>scheduleHandler</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function handles event scheduling and queuing.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sEvent</code>: The name of the event to be scheduled.</li>
			<li><code>sDelaySeconds</code>: (Optional) The delay in seconds before scheduling the event.</li>
			<li><code>sAction</code>: (Optional) The default action is "start", use "stop" to stop active events.</li>
			<li><code>sAddlQuery</code>: (Optional) Additional query conditions for event selection.</li>
			<li><code>grRecord</code>: (Optional) A GlideRecord representing the record associated with the event.</li>
			<li><code>oParam1 and oParam2</code>: (Optional) Additional parameters for the event.</li>
			<li><code>sQueue</code>: (Optional) The queue to use for event scheduling.</li>
		</p>
		<h2>sleep</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function is used to pause script execution for a specified number of
			milliseconds.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>iMilliseconds</code>: The number of milliseconds to pause script execution.</li>
		</p>
		<h2>getExecutionTrackerbyId</h2>
		<p><strong>Purpose:</strong>&#160;This function is used to get an execution tracker by id.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sId</code>: The&#160;<code>string</code>&#160;with the id of the execution tracker to retrieve.
			</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The GlideExecutionTracker specified by
			the&#160;<code>sId</code>&#160;parameter.</p>
		<h2>runFunction</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function runs a given JavaScript function in global scope. The function
			to
			run is provided as a string.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sFunction</code>: The JavaScript function to run, provided as a string.</li>
			<li><code>arguments(1-n)</code>: Any argument passed after the function name will be passed to the function
				in the order provided.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The result of the executed function.
		</p>
		<h2>runFunctionInScope</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function runs a specified JavaScript function within a specific scope.
			The
			function to run and scope ID are provided as arguments. This function is only available if the system
			property "glide.record.legacy_cross_scope_access_policy_in_script" is set to true. WARNING: this is NOT
			recommended to be done on any productive system as it breaks the delegated development security.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sFunction</code>: The JavaScript function to run, provided as a string.</li>
			<li><code>sScopeId</code>: The ID of the scope in which to run the function.</li>
			<li><code>arguments(2-n)</code>: Any argument passed after the function name will be passed to the function
				in the order provided.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The result of the executed function within the specified scope.
		</p>
		<h1>Script Include: global.GlobalToolsArray</h1>
		<h2>unique</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function removes duplicate elements from an array. In ECMA 21 scripts
			you can use "Array.from(new Set(<code>array</code>));" instead.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>aArray</code>: The input array to remove duplicates from.</li>
			<li><code>bRemoveEmpty</code>: (Optional) A boolean flag to indicate whether to remove empty values
				(Default: false).</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;An array with duplicate elements removed.
		</p>
		<h2>isValidArray</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function checks if an array is valid, not empty, and has at least one
			element.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>aArray</code>: The array to check for validity.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;A boolean value indicating whether the array is valid.
		</p>
		<h2>mergeArray</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function merges two arrays into one, removing duplicates.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>aArray1</code>: The first array to merge.</li>
			<li><code>aArray2</code>: The second array to merge.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;A merged array with duplicates removed.
		</p>
		<h2>addRemoveFromArray</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function adds elements to and removes elements from an array.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>aArray</code>: The original array.</li>
			<li><code>aArrayAdd</code>: An array of elements to add to the original array.</li>
			<li><code>aArrayRemove</code>: An array of elements to remove from the original array.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;An array with elements added and removed as specified.
		</p>
		<h2>getAddRemoveFromArrays</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function compares two arrays and returns the elements to add to and
			remove
			from one array to make it identical to the other.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>aArray</code>: The target array to be modified.</li>
			<li><code>aArrayOld</code>: The reference array to compare with.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;An&#160;<code>object</code>&#160;containing three properties:
			<li><code>add</code>: An array of elements to add to the target array.</li>
			<li><code>remove</code>: An array of elements to remove from the target array.</li>
			<li><code>same</code>: A boolean indicating whether the arrays are already identical.</li>
		</p>
		<h2>convertCommaSepStringToArray</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function cleans an comma separated string and returns an array.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sCommaSepString</code>: The comma separated string.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;An array with elements from the comma separated string.
		</p>
		<h1>Script Include: global.GlobalToolsObject</h1>
		<h2>isObject</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function checks if a given variable is an object. Does return true for
			all
			kind of objects that are not a primitive type. Use GlobalTools.getType to distinuish different object types.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oObj</code>: The variable to check.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;A boolean indicating whether the variable is an object (is false for arrays).
		</p>
		<h2>getValue</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves a configuration value from an object, allowing up to
			8
			levels of depth. It supports replacing the value with a default if not found.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sConfigPath</code>: A string representing the path to the desired value, separated by '/'.</li>
			<li><code>sReplace</code>: (Optional) A replacement value if the configuration value is not found.</li>
			<li><code>oConfig</code>: The object in which to get the configuration value.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The retrieved configuration value or the replacement value if not found.
		</p>
		<h2>setValue</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function sets a configuration value in an object, allowing up to 8
			levels of
			depth. It creates nested objects as needed to match the provided path.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sConfigPath</code>: A string representing the path where the value should be set, separated by
				'/'.</li>
			<li><code>oValue</code>: The value to set in the object.</li>
			<li><code>oConfig</code>: The object in which to set the configuration value.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;None. It modifies the input object&#160;<code>oConfig</code>&#160;in place.
		</p>
		<h2>hasValue</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function checks if a configuration value in an object exists, allowing
			up to 8 levels of
			depth.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sConfigPath</code>: A string representing the path where the value should be checked, separated by
				'/'.</li>
			<li><code>oConfig</code>: The object in which to check the configuration value.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;If the last node exists returns&#160;<code>true</code>,
			else&#160;<code>false</code>.
		</p>
		<h2>deepMerge</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function performs a simple deep merge of two objects with an option to
			merge
			arrays.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oSource</code>: The target object to merge into.</li>
			<li><code>oMerge</code>: The source object to merge from.</li>
			<li><code>bMergeArrays</code>: A boolean indicating whether to merge arrays.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The merged object.
		</p>
		<h2>getDepth</h2>
		<p><strong>Purpose:</strong>&#160;This function returns the depth of a nested object.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>oObj</code>: The object where the depth should be evaluated.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The depth of the object as integer (-1 if it's not an object, 0 if the object
			is empty).</p>
		<p>&#160;</p>
		<h2>parseJSON</h2>
		<p><strong>Purpose:</strong>&#160;This function returns an object from a valid JSON string.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sObj</code>: The string that should be parsed as a JSON.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The object if successful or undefined in case of an error.</p>
		<p>&#160;</p>
		<h1>Script Include: global.GlobalToolsTable</h1>
		<h2>isValidTable</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function checks if a given table name is valid in ServiceNow's
			GlideRecord
			context.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the table name to check.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns&#160;<code>true</code>&#160;if the table is valid; otherwise, it
			returns&#160;<code>undefined</code>.
		</p>
		<h2>isValidDBView</h2>
		<p><strong>Purpose:</strong>&#160;This function checks if a given table name is a valid Database
			View&#160;<code>sys_db_view</code>.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: A string representing the view name to check.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;Returns&#160;<code>true</code>&#160;if the view is valid; otherwise, it
			returns&#160;<code>undefined</code>.</p>
		<h2>getRecordClass</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function gets the class name of a GlideRecord object.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>grRecord</code>: A GlideRecord object to retrieve the class name from.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the class name as a string if the input is a valid GlideRecord;
			otherwise, it returns&#160;<code>undefined</code>.
		</p>

		<h2>getAbsoluteBase</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function gets the absolute base class for a given table name.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the table name to retrieve the absolute base class for.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the absolute base class name as a string if the table is valid;
			otherwise, it returns&#160;<code>undefined</code>.
		</p>

		<h2>getTableHierarchy</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function gets the hierarchy of tables for a given table name.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the table name to retrieve the table hierarchy for.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an array of table names representing the hierarchy if the table is
			valid; otherwise, it returns&#160;<code>undefined</code>.
		</p>

		<h2>getTableExtensions</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function gets the extensions or all extensions of a given table name.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the table name to retrieve the extensions for.</li>
			<li><code>bAllExtensions</code>: A boolean flag indicating whether to retrieve all extensions
				(if&#160;<code>true</code>) or just direct extensions (if&#160;<code>false</code>).
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an array of table names representing the extensions if the table is
			valid; otherwise, it returns&#160;<code>undefined</code>.
		</p>
		<h2>isTableUpdateSynched</h2>
		<p><strong>Purpose:</strong>&#160;This function checks if a given table name is updated synched (changes are
			captured in update sets and scoped applications).</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: A string representing the table to check.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;Returns&#160;<code>true</code>&#160;if the table is update synched; otherwise,
			it returns&#160;<code>undefined</code>.</p>
		<h2>getTableScopeInfo</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves cross-scope access information for a given table.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table to retrieve access information for.
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an&#160;<code>object</code>&#160;containing cross-scope access
			information for
			the table. The object has the following properties:
		<ul>
			<li><code>id</code>: A string representing the sys_scope ID.</li>
			<li><code>access</code>: A string representing the access level.</li>
			<li><code>read</code>: A boolean indicating if read access is granted.</li>
			<li><code>create</code>: A boolean indicating if create access is granted.</li>
			<li><code>write</code>: A boolean indicating if write access is granted.</li>
			<li><code>delete</code>: A boolean indicating if delete access is granted.</li>
		</ul>
		If the table is not valid, it returns&#160;<code>undefined</code>.
		</p>
		<h2>getInternalType</h2>
		<p><strong>Purpose:</strong>&#160;This function returns the internal field type for a given table and field.</p>
		<p><strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table for which to retrieve the field.</li>
			<li><code>sField</code>: A string representing the name of the field.</li>
		</p>
		<p><strong>Returns:</strong>&#160;Returns a string representing the internal field type
			or&#160;<code>undefined</code>&#160;if not found.
		</p>
		<h2>getDisplayField</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves the display field for a given table. It checks if a
			display field override is set and returns the overridden display field if available.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table for which to retrieve the display
				field.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns a string representing the display field of the table
			or&#160;<code>undefined</code>&#160;if not found.
		</p>
		<h2>getFieldLabel</h2>
		<p><strong>Purpose:</strong>&#160;This function retrieves the field label for a given table and field in the
			language of the current user.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>oTableOrRecord</code>: A string representing the table name or a GlideRecord object.</li>
			<li><code>sField</code>: A string representing the name of the field.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;Returns a string representing the label of the field or&#160;<code>undefined</code>&#160;if table or field is not found.</p>
		<h2>getFields</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves the list of field names for a given table or
			GlideRecord
			object.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oTableOrRecord</code>: A string representing the table name or a GlideRecord object.</li>
			<li><code>bOmitSysId</code>: (Optional) if "true", don't add sys_id to the list.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an array of field names for the specified table or GlideRecord
			object.
		</p>
		<h2>getRefTable</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves the reference table name based on the reference field
			and the table it belongs to.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table containing the reference field.</li>
			<li><code>sField</code>: A string representing the name of the reference field.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns a string representing the name of the reference table associated with
			the given field and table.
		</p>
		<h2>getRefFieldName</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves the name of the reference field in a given table that
			points to a specified reference table. It can return either a single field name or an array of field names.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>fRecord</code>: A GlideRecord object representing the record.</li>
			<li><code>sRefTable</code>: A string representing the name of the reference table.</li>
			<li><code>bCheckRefTableHierarchy</code>: A boolean indicating whether to check the hierarchy of
				the&#160;<code>sRefTable</code>&#160;table.
			</li>
			<li><code>sReturnType</code>: A string specifying the return type, either 'array' or 'string'.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns either a single field name or an array of field names in the
			specified table that reference the given&#160;<code>sRefTable</code>&#160;table with or without respecting
			the
			hierarchy depending on&#160;<code>bCheckRefTableHierarchy</code>.
		</p>
		<h2>getDictOrOverrideValue</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves dictionary records or values (depending
			wether&#160;<code>bReturnRecord</code>&#160;is set) while respecting overrides. It can return dictionary
			records or their
			attribute values.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sField</code>: A string representing the name of the field.</li>
			<li><code>sAttributeName</code>: A string representing the name of the attribute.</li>
			<li><code>bReturnRecord</code>: (Optional) A boolean indicating whether to return dictionary records.</li>
			<li><code>sAddlDictQuery</code>: (Optional) A string representing additional query conditions for the
				dictionary.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns dictionary records or their attribute values based on the provided
			parameters.
		</p>
		<h2>getFieldChoices</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves the choices available for a specific field in a
			table. It
			can also filter choices based on a dependent field value.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sField</code>: A string representing the name of the field.</li>
			<li><code>sDependentFieldValue</code>: A string representing the value of the dependent field to filter
				choices (optional).</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an array containing three arrays: choices, dependent values, and
			choice display values.
		</p>
		<h2>getMandatoryFields</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves an array of mandatory fields in a given table.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an array of mandatory field names in the specified table.
		</p>
		<h1>Script Include: global.GlobalToolsRecordRead</h1>
		<h2>countRecords</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function counts records in a specified table based on the provided query
			and
			field.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sQuery</code>: A string representing the query to filter records.</li>
			<li><code>sField</code>: (Optional) A string representing the field for which to count values.</li>
			<li><code>bDisplayValue</code>: (Optional) A boolean indicating whether to include display values.</li>
			<li><code>bDisplayValueOnly</code>: (Optional) A boolean indicating whether to include only display values.
			</li>
			<li><code>bQueryNoDomain</code>: (Optional) A boolean indicating whether to query without considering
				domains.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an integer with the count or an array of record counts grouped by the
			provided&#160;<code>sField</code>&#160;parameter.
		</p>
		<h2>sumRecordsField</h2>
		<p><strong>Purpose:</strong>&#160;This function sums up the field values for records.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sField</code>: (Optional) A string representing the field for which to sum up the values.</li>
			<li><code>sQuery</code>: A string representing the query to filter records.</li>
			<li><code>bQueryNoDomain</code>: (Optional) A boolean indicating whether to query without considering
				domains.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>number</code>&#160;with the sum of all field values.</p>
		<h2>getRecord</h2>
		<p><strong>Purpose:</strong>&#160;This function retrieves one records from a specified table based on the
			provided query or sys_id and options ensuring the record is return in the correct class.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sQueryOrSysId</code>: A string representing the query or the sys_id to find the record.</li>
			<li><code>bWorkflow</code>: A boolean indicating whether to include workflow information.</li>
			<li><code>bAutoSysFields</code>: A boolean indicating whether to include auto-system fields.</li>
			<li><code>bQueryNoDomain</code>: A boolean indicating whether to query without considering domains.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;Returns a GlideRecord object with the retrieved record in the real class.</p>
		<h2>getRecords</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves records from a specified table based on the provided
			query
			and options.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sQuery</code>: A string representing the query to filter records.</li>
			<li><code>aOrderBy</code>: An array of strings representing fields to order records by.</li>
			<li><code>aOrderByDesc</code>: An array of strings representing fields to order records by in descending
				order.</li>
			<li><code>iLimit</code>: An integer representing the maximum number of records to retrieve.</li>
			<li><code>bWorkflow</code>: A boolean indicating whether to include workflow information.</li>
			<li><code>bAutoSysFields</code>: A boolean indicating whether to include auto-system fields.</li>
			<li><code>bQueryNoDomain</code>: A boolean indicating whether to query without considering domains.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns a GlideRecord object with the retrieved records.
		</p>
		<h2>checkRecordByField</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function checks if a record exists in a specified table with a given
			field-value pair.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sField</code>: A string representing the field to check.</li>
			<li><code>sValue</code>: A string representing the value to check for in the specified field.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns a boolean value indicating whether a record with the specified
			field-value pair exists.
		</p>
		<h2>getSysIdByQuery</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves the sys_id of a record in a specified table based on
			the
			provided query.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sQuery</code>: A string representing the query to filter records.</li>
			<li><code>bUniqueOnly</code>: A boolean indicating whether to retrieve only unique records.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the sys_id of the first matching recor .
			If&#160;<code>bUniqueOnly</code>&#160;is true returns&#160;<code>undefined</code>&#160;if more than one
			record is found.
		</p>
		<h2>getRelatedRecordByKeys</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves a related record based on specified keys and
			configurations using the&#160;<code>getRecordByKeys</code>&#160;function below.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oRecordConfig</code>: An object containing configuration for record retrieval.</li>
			<li><code>oRecordValues</code>: An object containing values for record retrieval.</li>
			<li><code>aError</code>: An array to store error messages.</li>
			<li><code>oField</code>: A field or configuration object for specifying the field to search.</li>
			<li><code>sRefTable</code>: The reference table to use if not specified in the field configuration.</li>
			<li><code>iArrayField</code>: An optional index for array fields.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the unique value (sys_id) of the related record if found, or an empty
			string if not found.
		</p>
		<h2>getRecordByKeys</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function retrieves a record based on specified keys and configurations.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oRecordConfig</code>: An object containing configuration for record retrieval.
				<pre>sTargetTable: table to lookup record
aKeys: array of keys to look for to identify record (first one that produces a result is taken)
  A key (string or object) or an array with key combinations (all must match) to uniquely identify a record
    2.1 'key_field': simple key field taking the value of the respective value field (fieldname in source body and target record are the same)
    2.2 Array of key fields ['key_field_1', 'key_field_2'], key combinations (all must match) to uniquely identify a record
      If the input field is different from the target field or the target field is a dot walk field you can replace the string with an object that contains the following properties:
        'sInputField': 'input_field', --&gt; field from oRecordValues where the value is found
        'sTargetField': 'target_field', --&gt; field in the sTargetTable record (can be a dot walk field like caller_id.email)
        'sAddlQuery': 'active=true', --&gt; additional query to be applied to the target lookup
        'bQueryEmptyFields': 'true/false', --&gt; if input_field is empty will add a query: input_fieldISEMPTY
bQueryEmptyFields: Generic setting to query empty fields with ISEMPTY instead of returning an error for all empty fields
</pre>
			</li>
			<li><code>oRecordValues</code>: An object containing field / value pairs.</li>
			<li><code>aError</code>: An array to store error messages.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns a GlideRecord object with the retrieved record if found,
			or&#160;<code>undefined</code>&#160;if not found.
		</p>
		<h2>convertGRtoJSON</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function converts a GlideRecord to JSON format.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>grRecord</code>: The GlideRecord object to be converted.</li>
			<li><code>bStringify</code>: (Optional) A boolean indicating whether to return a JSON string or a JSON
				object (default: false).</li>
			<li><code>bDisplayValue</code>: (Optional) A boolean indicating whether to get the Display Value (default:
				false).</li>
			<li><code>bDisplayValueOwnField</code>: (Optional) A boolean indicating whether to get the Display Value in
				its own field with the "_dv" postfix (default: false).</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns JSON or a JSON string depending on
			the&#160;<code>bStringify</code>&#160;
			parameter or&#160;<code>undefined</code>&#160;if&#160;<code>grRecord</code>&#160;is not a valid GlideRecord.
		</p>
		<h2>convertGRtoXML</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function converts a GlideRecord to XML format.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>grRecord</code>: The GlideRecord object to be converted.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns XML string
			or&#160;<code>undefined</code>&#160;if&#160;<code>grRecord</code>&#160;is not a valid GlideRecord.
		</p>
		<h2>makeQueryADotWalkQuery</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function adds a dot walking field to a query string.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sQuery</code>: The query string to which the dot walking field is added.</li>
			<li><code>sDotWalkField</code>: The dot walking field to add to the query.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the modified query string.
		</p>
		<h2>combineQueries</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function combines two queries, considerung that one of them could
			contains a
			big OR statements (^NQ).
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sFirstQuery</code>: The first query string.</li>
			<li><code>sSecondQuery</code>: The second query string.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the combined query string or "false" if both queries contain a big OR
			statement.
		</p>
		<h1>Script Include: global.GlobalToolsRecordWrite</h1>
		<h2>doRecord</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function inserts, updates, or deletes a record based on values and a
			configuration object.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oValues</code>: An object containing the values to be inserted or updated.</li>
			<li><code>oConfig</code>: A configuration object specifying the table, query, and other options for the
				operation.
				<pre>bLog: (Optional) if true does verbose logging (default: false)
bQueryEmptyFields: (Optional) if true does add &lt;field&gt;ISEMTPY for empty values (default: false)
aQueryFields: fields where the value will be used to query the record
sTargetTable: table to be queried
bInsert: (Optional) if true does allow insert (default: true)
bUpdate: (Optional) if true does allow update (default: true)
bDelete: (Optional) if true does delete (default: false)
bNoWorkflow: (Optional) if true does grRecord.setWorkflow(false) (default: false)
bNoEngine: (Optional) if true does grRecord.setUseEngine(false) (default: false)
bNoAutoSysFields: (Optional) if true does grRecord.autoSysFields(false) (default: false)
bNoDomain: (Optional) if true does grRecord.queryNoDomain() (default: false)
bKeepSysId: (Optional) if true does grRecord.setNewGuidValue(&lt;sys_id&gt;) on insert (default: false)
oValues: (Optional) list of hardcoded field/value pairs to be set on the target record (will be overwritten if also provided in the oValues parameter)
aTargetFields: (Optional) if set, only these fields can be set, no matter what is defined in the oValues parameter.	</pre>
			</li>
			<li><code>oError</code>: An object to store error information. Use sErrorReturnType property to define the
				returned values.
				<pre>001 = missing query
002 = error updating: &lt;errormessage&gt;
003 = error inserting: &lt;errormessage&gt;
004 = missing table
005 = exception: &lt;exception&gt;
			</pre>
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the unique ID of the inserted or updated record or an error message.
		</p>
		<h2>updateMultiple</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function updates multiple records in a table based on values and a
			query.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oValues</code>: An object containing the values to be updated.</li>
			<li><code>oConfig</code>: A configuration object specifying the table, query, and other options for the
				update.
				<pre>bLog: (Optional) if true does verbose logging (default: false)
sTargetTable: table to be queried
sQuery: query to be applied
bNoWorkflow: (Optional) if true does grRecord.setWorkflow(false) (default: false)
bNoEngine: (Optional) if true does grRecord.setUseEngine(false) (default: false)
bNoAutoSysFields: (Optional) if true does grRecord.autoSysFields(false) (default: false)
		</pre>
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;<code>true</code>&#160;if update executed, else&#160;<code>undefined</code>.
		</p>
		<h2>deleteMultiple</h2>
		<p><strong>Purpose:</strong>&#160;This function deletes multiple records in a table based on a query.</p>
		<p><strong>Parameters:</strong>
			<li><code>sTable</code>: The table where the records shall be deleted.</li>
			<li><code>sQuery</code>: The query to find the records to be deleted.</li>
		</p>
		<p><strong>Returns:</strong>&#160;<code>true</code>&#160;if delete executed, else&#160;<code>undefined</code>.
		</p>

		<h2>setGRValue</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function sets a value for a field in a GlideRecord object.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>grRecord</code>: The GlideRecord object to be updated.</li>
			<li><code>sField</code>: The name of the field to update.</li>
			<li><code>oValue</code>: The value to set for the field.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Updates the field value in the&#160;<code>grRecord</code>&#160;object.
		</p>
		<h2>abortGRAction</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function aborts a&#160;<code>grRecord</code>&#160;action, such as an
			update or
			insert.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>grRecord</code>: The GlideRecord object for which to abort the action.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Aborts the specified action for the&#160;<code>grRecord</code>&#160;object.
		</p>
		<h1>Script Include: global.GlobalToolsRecordWriteValidate</h1>
		<p>This script will be documented in detail in a community article later.</p>
		<h2>validateAndWrite</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function validates and writes a record based on configuration and
			values.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oRecordConfig</code>: A configuration object specifying the record target table, options, and
				other settings.
				<pre>
				bLog: (Optional) Default: false, will add additional logs depending on sLogLevel defined.
sLogLevel: (Optional) Default: error, if bLog is true you can choose info or debug for verbose logging.
bLogPrefix: (Optional) Default: GlobalToolsRecordWriteValidate -.

sTargetTable: The table to update inserted/updated.
sTableSequenceId: (Optional) Default: default, if provided will use this id in error object and as IRE internal_id.

sErrorReturnType: 
	code: array of error codes
	message: array of error messages (detailed)
	normal (default): array of objects with error details (code, message, messagedetail)
	full: like normal but additionally provide message and message detail arguments

bUseIRE: (Optional) Default: false, if true will use IRE to create/update records.
bLogIREOutput: (Optional) Default: false, if true will log the IRE engine output to the system log.
sDataSourceIRE: (Optional) Default: "Other Automated", first parameter for the IdentificationEngine.createOrUpdateCI function.

bDoAction: (Optional) Default: true, if false will not run final action.
sAction: insert (only), update (only), save (insert/update) or delete.
bInsert: (Optional) Default: false, is overwritten by sAction.
bUpdate: (Optional) Default: false, is overwritten by sAction.
bDelete: (Optional) Default: false, is overwritten by sAction.

bUseGlideRecordSecure: (Optional) Default: false, if true will use GlideRecordSecure instead of GlideRecord.
bNoDomain: (Optional) Default: false, if true will use GlideRecord.queryNoDomain() instead of GlideRecord.query().
bNoWorkflow: (Optional) Default: false, if true will set GlideRecord.setWorkflow(false).
bNoAutoSysFields: (Optional) Default: false, if true will set GlideRecord.autoSysFields(false).

bKeepSysId: (Optional) if sys_id is set and action is insert then apply this sys_id.

bTemplateIsMandatory: (Optional) Default: false, if true, either sTemplateName or sTemplateValueField must be set (and sTemplateValueField must have a valid template in the values object provided).
sTemplateName: (Optional) name if the template is to be applied (is overwritten if a valid value in the values object for the field sTemplateValueField is provided).
sTemplateValueField: (Optional) Default "template", if set uses this field to retrieve the template name from the values object.
bTemplateDeleteFieldValue: (Optional) Default: false, if true will remove the template field from the payload before running throught the values.

aMandatoryFields: (Optional) if set, these fields must have a value in the values object.
bCheckDictionaryMandatory: (Optional) Default: true, if false will not check mandatory dictionary fields.

bCheckDataPolicy: (Optional) Default: true, if false will not check data policy.
bCheckDataPolicyMandatory: (Optional) Default: true, if false will not check data policy for mandatory fields.
bCheckDataPolicyReadOnly: (Optional) Default: true, if false will not check data policy for read-only fields.
sCheckDataPolicyAdditionalQuery: (Optional), if set will apply the query when looking for data policies.

aIgnoreChoiceFields: (Optional) Default: ['short_description'], if set will not check these fields for valid choices.

bErrorOnAddlFieldsInValues (Legacy: bErrorOnAddlFieldsInBody): (Optional) Default: false, if true will return an error if values object contains more fields than aFields.

bStateFlowActionIsMandatory: (Optional) Default: false, if true, either sStateAction or sStateActionId must be valid (lookup of the sActionValueField must have a valid sStateFlowAction in the values object provided).
sStateFlowActionValueField: (Optional) Default: "action", if set uses this field to retrieve the sStateFlowAction name from the values object.
bStateFlowActionDeleteFieldValue: (Optional) Default: false, if true will remove the action field from the payload before running throught the values.
oStateFlowActionConfig: (Optional), object with state flow actions:
	sStateFlowAction: Value from the sStateFlowActionValueField in the values object:
		sStateAction: Name of the state flow action.
		sStateActionId: SysId of the state flow action.
		bWorkNotesMandatory: if this action, worknotes are mandatory.

aDynamicFieldConfig: (Optional), will evaluate a query condition or input value object checks and if true modifies the fields and mandatory fields.
	sQueryCondition: (Optional), will run a filter against the old record and dynamically modify fields if true.
	aInputValueChecks: (Optional), will run checks against the values object and dynamically modify fields if true.
		sField: field where the value check is run against.
		sRegExpPattern: (Optional), regular expression to be run against the value in the sField
		sRegExpFlags: (Optional), regular expression flags to be used in above regex check.
		sScript: (Optional), script to be evaluated. Before the script is run all occurrences of "sValue" will be replaced by the actual field value.
	aFields: (Optional), if any of the above evaluation methods is true these fields will be added to the field configuration (aFields).
	aFieldsRemoval: (Optional), if any of the above evaluation methods is true these fields will be removed from the field configuration (aFields).
	aMandatoryFields: (Optional), if any of the above evaluation methods is true these fields will be added to the mandatory fields configuration (aMandatoryFields).
	aMandatoryFieldsRemoval: (Optional), if any of the above evaluation methods is true these fields will be removed from the mandatory fields  configuration (aMandatoryFields).

aInputValueChecks:  (Optional), 
	sField: field where the value check is run against.
	sRegExpPattern: (Optional), regular expression to be run against the value in the sField
	sRegExpFlags: (Optional), regular expression flags to be used in above regex check.
	sScript: (Optional), script to be evaluated. Before the script is run all occurrences of "sValue" will be replaced by the actual field value.
	sErrorMessage: if any of the above evaluation methods is true then this error will be set with the generic error: 400_038 Input values check failed

aKeysDefaultReferenceFields: (Optional), Default: ["sys_id"], if set will use the array values as keys if "aKeys" is empty.
bKeysDefaultReferenceDisplayField: (Optional) Default: false, if true will use the grRefRecord.getDisplayField from the reference table as key if "aKeys" is empty.

aKeys: (Optional for insert, mandatory for update/delete) Default: see GlobalToolsRecordRead.getRecordByKeys for documentation.
aFields: (Optional), if set is an array of fields to be updated including special field configurations for value mapping and lookup.
	sField: string with the effective field name.
	oField: object with a specific field configuration.
		sField: name of the field in the table.
		sSourceField: name of the field in the values object.
		sRefTable: (Optional), if set will use this table for lookup, if empty the sField dictionary reference table is used.
		aKeys: see GlobalToolsRecordRead.getRecordByKeys for documentation.
		sDefaultValue: (Optional), if set replaces an empty field value with this value.
		sPrefix: (Optional), if set adds a prefix to the value.
		sPostfix: (Optional), if set adds a postfix to the value.
		sRelatedTableResultId: (Optional), if set, will lookup the value (usualy sys_id) from another table treated earlier in the integration (/oRelatedTableResultIds/sRelatedTableResultId in the configuration object).
		bAddValues: (Optional), Default false, if true and field is a list will preserve old values and add the new values if they are not present.
		sRefLookupScript: (Optional), will run function in sRefLookupScript this, if empty will look for a generic function in the "oTransformConfig/oTypeMap/reference/" + sRefTable + "/sRefLookupScript".
			Parameters passed to the sRefLookupScript:
				bLog: bLog from config.
				sField: sField from field object.
				sValue: sRefInput, value from values object.
				sTargetTable: main table for record.
				sRefTable: reference lookup table.
				oField: field object.
				grRecord: current record.
				oRecordConfig: configuration object.
				oRecordValues: values object.

oTransformConfig: (Optional), if set is an object containing transform instructions.
	oFieldMap: (Optional), if set is an object containing value pairs for a specific field, if the key is found the value is replaced.
		"field_name": 
			oMap: {"old_value": "new_value"}
		oTypeMap: (Optional), if set is an object containing value pairs for a specific field, if the key is found the value is replaced.
			"internal_field_type": 
				oMap: {"old_value": "new_value"}
			"reference": 
				"sRefTable": 
					sRefLookupScript: (Optional), if set, uses this function to retrieve the reference value (same parameters as the function under aFields/oField config object)

bImpersonateMandatory: (Optional) Default: false, if true, either sImpersonateDefaultUser or sImpersonateValueField must be set (and sImpersonateValueField must have a valid user in the values object provided).
sImpersonateDefaultUser (Legacy: sDefaultUser): (Optional), if set a lookup is made on the sys_user table on sys_id, user_name and email.
sImpersonateValueField: (Optional), Default "user", if set is used to find the property in the values object and a lookup is made on the sys_user table on sys_id, user_name and email.
bImpersonateDeleteFieldValue: (Optional) Default: false, if true will remove the "sImpersonateValueField" field from the payload before running throught the values.

aUpdateBusinessLogicChecks: (Optional) if set is an object containing before and after queries that if not fulfilled, will generate the error specified.
	sBeforeQuery: (Optional), if set is run against the GlideRecord as retrieved by the aKeys definition.
	sAfterQuery: (Optional), if set is run against the GlideRecord after all values have been applied.
	sErrorMessage: the error message to be returned if either of the queries do not evaluate to true.
</pre>
			</li>
			<li><code>oRecordValues</code>: An object containing the values to be written to the record.
				<pre>action / sActionValueField: (Optional), can be used to define the state flow action to be applied.
user / sImpersonateValueField: (Optional),  can be used to define the impersonate user to be used.
template / sTemplateValueField: (Optional), can be used to define the template to be applied.
				</pre>
			</li>
			<li><code>oError</code>: An object to store error information.
				<pre>
			400_001: Missing or empty record values object

400_002: Template is mandatory
400_003: Invalid Template

400_004: Fields are mandatory (Data Policy)
400_005: Fields are mandatory (Config)

400_006: Stateflow action is mandatory
400_007: Stateflow action is not valid
400_008: Stateflow action not found
400_009: Stateflow action worknotes are mandatory

400_010: Fields that are not configured are not allowed

400_011: Invalid field in config object
400_012: Invalid field in mandatory fields
400_013: Invalid field in values object

400_014: Update business logic check failed

400_015: Invalid value in reference field (not found)
400_016: Invalid dependent reference field configuration
400_017: Invalid value in reference field (ref qualifier)
400_018: Invalid choice list configuration
400_019: Invalid value in choice list field
400_020: User is not a member of the group
400_021: Invalid boolean value
400_022: Invalid array value
400_023: Invalid date/time value
400_024: Invalid date value
400_025: Invalid time value
400_026: Invalid integer number value
400_027: Invalid floating point number value
400_028: Invalid email address
400_029: Invalid phone number
400_030: Invalid ip address
400_034: Invalid duration value
400_035: Invalid document id or table
400_036: Invalid table
400_037: Invalid GUID value
400_038: Input values check failed

400_031: Invalid field configuration in config object (missing field property)
400_032: Invalid field configuration in config object (invalid field type)
400_033: Invalid key configuration in config object

400_101: Access denied: record create
400_102: Access denied: record write
400_103: Access denied: record delete
400_104: Access denied: field write
400_105: Access denied (Data Policy): field write
400_106: Access denied: field create

403_001: Invalid impersonate user provided
403_002: Impersonate user is mandatory
403_003: Impersonating failed
403_004: Impersonating failed and is mandatory

404_001: Invalid action: record delete
404_002: Invalid action: record insert
404_003: Invalid action: record update

405_001: Missing or empty configuration object or target table
405_002: Invalid action: conflict
405_003: Invalid action: empty

500_001: Error processing stateflow action
500_002: Error processing business logic
500_003: Error inserting record
500_004: Error updating record
500_005: Error deleting record
500_006: Error getting reference field value
500_007: Error processing input values check script
500_008: Error processing business rules and engine
			</pre>
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns the unique ID of the written record or an error message.
		</p>
		<h2>validateAndReturnIREObject</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function validates data and returns an object, such as an Incident
			Request
			(IRE), based on configuration and values.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>oRecordConfig</code>: A configuration object specifying the record target table, options, and
				other settings (same as validateAndWrite).</li>
			<li><code>oRecordValues</code>: An object containing the values to be validated (same as validateAndWrite).
			</li>
			<li><code>oError</code>: An object to store error information (same as validateAndWrite).</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;Returns an object with the IRE payload.
		</p>
		<h1>Script Include: global.GlobalToolsATF</h1>
		<h2>initialize</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function initializes the class with parameters.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sScriptIncludeName</code>: The name of the Script Include to be tested.</li>
			<li><code>_ScriptIncludeRef</code>: The initialized Script Include to be tested&#160;<code>var _si = new
					myScriptInclude();</code>&#160;is null.</li>
			<li><code>outputs</code>: The outputs parameter from ATF test step</li>
			<li><code>steps</code>: The steps parameter from ATF test step</li>
			<li><code>params</code>: The params parameter from ATF test step</li>
			<li><code>stepResult</code>: The stepResult parameter ATF from test step</li>
			<li><code>assertEqual</code>: The assertEqual parameter ATF from test step</li>
		</p>
		<h2>runATF</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function runs the specific function and passes all variables except
			script and expected value to it.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sFunction</code>: The Script Include&#160;<code>sFunction</code>&#160;to be tested.</li>
			<li><code>oExpectedResult</code>: The expected return value from&#160;<code>sFunction</code>&#160;call.
				<pre>oExpectedResult is a number or a string containing a comparison and a number (&quot;&lt;10&quot;, &quot;&gt;10&quot;, &quot;&lt;=10&quot;, &quot;&gt;=10&quot;) and the result is of type, number, array or gliderecord it will return an error if the comparison is not true (e.g. if the number is 1 and the array does not contain exactly 1 element or the gliderecord count is not 1).
oExpectedResult is a string and the oResult is a gliderecord then grRecord.getUniqueValue() will be compared against the string.
oExpectedResult is a regex the then the result will converted to string and is tested against the regex.
oExpectedResult is a function the then the function will be called with parameters:
	oResult and sResultType and an error will be added if the function returns a value: (sErrorMessage)
oExpectedResult is anything else it will be compared to the result (===).
			</pre>
			</li>
			<li><code>arguments</code>: (Optional) The&#160;<code>arguments</code>&#160;that will be passed to
				the&#160;<code>sFunction</code>.
			</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The true if test is successful or&#160;<code>undefined</code>&#160;if it
			failed.
		</p>
		<h2>getRecord</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function uses the GlobalTools.getRecords function and if successful does
			a grRecord.next() to get the first record.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sTable</code>: The table where the record is located</li>
			<li><code>sQuery</code>: The query to find the record.</li>
		</p>
		<p>
			<strong>Returns:</strong>&#160;The a GlideRecord if successful or&#160;<code>undefined</code>&#160;if no
			record is
			found.
		</p>
		<h2>addError</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function adds an error to the error array.
		</p>
		<p>
			<strong>Parameters:</strong>
			<li><code>sFunction</code>: The Script Include&#160;<code>sFunction</code>&#160;that was tested.</li>
			<li><code>sError</code>: The error in validation of running the&#160;<code>sFunction</code>&#160;call.</li>
		</p>
		<h2>endATF</h2>
		<p>
			<strong>Purpose:</strong>&#160;This function parses the result, sets the error message if any and ends the
			ATF
			test.
		</p>
		<p>
			<strong>Returns:</strong>&#160;The true if test is successful or false if it failed.
		</p>
		<p></p>
		<h1>Script Include: global.GlobalToolsRESTAPI</h1>
		<p></p>
		<h2>initialize</h2>
		<p><strong>Purpose:</strong>&#160;This function initializes the class with parameters.</p>
		<p><strong>Parameters:</strong></p>
		<li><code>oConnectionAlias</code>: The Connection &amp; Credential Alias [sys_alias] to be used in the REST
			API (can be the GlideRecord or the value any of the fields:&#160;<code>sys_id, id, name</code>).</li>
		<li><code>bLog</code>: (Optional) if true does verbose logging (default: false)</li>
		<li><code>bQueryNoDomain</code>: (Optional) if true will add sysparm_query_no_domain=true (default: false)
		</li>
		<p>&#160;</p>
		<h2>getConnectionConfig</h2>
		<p><strong>Purpose:</strong>&#160;This function returns an object with the configuration values determined from
			the&#160;<code>initialize</code>&#160;function parameters.</p>
		<p><strong>Parameters:</strong></p>
		<li><code>bStringify</code>: (Optional) if true returns a stringified object (default: false)</li>
		<p><strong>Returns:</strong>&#160;The configuration object or string with the configuration details.
		</p>
		<h2>testNOWConnection</h2>
		<p><strong>Purpose:</strong>&#160;This function does a REST call using the configuration to fetch one record
			from the&#160;<code>task</code>&#160;table.</p>
		<p><strong>Returns:</strong>&#160;Returns an object where property "success" is&#160;<code>true</code>&#160;if
			successful
			or&#160;<code>false</code>&#160;if there was an error or no record is found. The object also contains a
			message
			property with error messages.</p>
		<h2>getRemoteRecord</h2>
		<p><strong>Purpose:</strong>&#160;This function uses the table API of a ServiceNow instance to retrieve a single
			record based on the parameters provided and return it as a glide record.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: A string representing the name of the table.</li>
			<li><code>sQuery</code>: (Optional) A string representing the query to filter records
				(<code>sysparm_query</code>&#160;URL parameter).</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The a&#160;<code>glide record</code>&#160;or a object with the error details.
		</p>
		<pre>{ 
'success': false, 
'message': sErrorMsg, 
'error_code': sStatus
}</pre>
		<p></p>
		<h2>doNOWRESTQuery</h2>
		<p><strong>Purpose:</strong>&#160;This function uses the table API of a ServiceNow instance to retrieve records
			based on the parameters provided.</p>
		<p><strong>Parameters:</strong></p>
		<li><code>sTable</code>: A string representing the name of the table.</li>
		<li><code>sQuery</code>: (Optional) A string representing the query to filter records
			(<code>sysparm_query</code>&#160;URL parameter).</li>
		<li><code>sOffset</code>: (Optional) A string representing the offset to be used when getting more records
			than defined in the limit (<code>sysparm_offset</code>&#160;URL parameter) Default: "0".</li>
		<li><code>sLimit</code>: (Optional) A string representing the maximum number of records to be returned
			(<code>sysparm_limit</code>&#160;URL parameter) Default: 1000.</li>
		<li><code>aFields</code>: (Optional) A array with the fields to be returned. If the URL length limit is reached
			the parameter is omited and an error is logged (<code>sysparm_fields</code>&#160;URL parameter) Default: [].
		</li>
		<li><code>sDisplayValue</code>: (Optional) If&#160;<code>"true"</code>&#160;will return display values instead
			of real
			values,&#160;<code>"all"</code>&#160;will return both real value and display value
			(<code>sysparm_display_value</code>&#160;URL parameter) Default: "false".</li>
		<li><code>oRequestBodyOrAttachmentInfo</code>: (Optional) An object
			containing the details on which record and filename the result body should be attached as a file:
			<pre>{
	'sTable': 'incident',
	'sSysId': 'd71f7935c0a8016700802b64c67c11c6',
	'sFilename': 'RESTAttachment.json',
}
</pre>
		</li>
		<li><code>bIncludeRefLink</code>: (Optional) if true does return URLs for each reference fields
			(<code>sysparm_exclude_reference_link=true</code>&#160;URL parameter) Default: false.</li>
		<p><strong>Returns:</strong>&#160;The request result body array or a object with the error details.</p>
		<pre>{ 
'success': false, 
'message': sErrorMsg, 
'error_code': sStatus
}
</pre>
		<p></p>
		<h2>doNOWRESTCount</h2>
		<p><strong>Purpose:</strong>&#160;This function uses the stats API of a ServiceNow instance to count records
			based on the parameters provided.</p>
		<p><strong>Parameters:</strong></p>
		<li><code>sTable</code>: A string representing the name of the table.</li>
		<li><code>sQuery</code>: (Optional) A string representing the query to filter records
			(<code>sysparm_query</code>&#160;URL parameter).</li>
		<li><code>sGroupByField</code>: (Optional) A string representing the field used to group the records
			(<code>sysparm_group_by</code>&#160;URL parameter).</li>
		<li><code>bOrderByCount</code>: (Optional) If true and group by field is not empty, will order the result
			descending by count, else by group by field name (<code>sysparm_order_by</code>&#160;URL parameter).</li>
		<li><code>sDisplayValue</code>: (Optional) If&#160;<code>"true"</code>&#160;will return display values instead
			of real
			values,&#160;<code>"all"</code>&#160;will return both real value and display value
			(<code>sysparm_display_value</code>&#160;URL parameter) Default: "false".</li>
		<p><strong>Returns:</strong>&#160;The the count as&#160;<code>number</code>&#160;or
			as&#160;<code>object</code>&#160;where the key
			is the&#160;<code>group by field value</code>&#160;and the value the count or a object with the error
			details.</p>
		<pre>Error:
{ 
'success': false, 
'message': sErrorMsg, 
'error_code': sStatus
}

Count result:
9

Count sGroupByField and  bOrderByCount:
{
'inquiry':18,
"software":8,
'hardware':5,
'network':4,
'database':1
}
</pre>
		<p></p>
		<h2>doRESTRequest</h2>
		<p><strong>Purpose:</strong>&#160;This function does a REST call using the configuration parameters provided.
		</p>
		<p><strong>Parameters:</strong></p>
		<li><code>sUrl</code>: The string complimenting the connection URL.</li>
		<li><code>sMethod</code>: (Optional) A string representing the method (allowed values: GET, POST, PUT,
			PATCH) Default: GET.</li>
		<li><code>oRequestBodyOrAttachmentInfo</code>: (Optional) For&#160;<code>GET</code>&#160;method this is an
			object
			containing the details on which record and filename the result body should be attached as a file:
			<pre>{
	'sTable': 'incident',
	'sSysId': 'd71f7935c0a8016700802b64c67c11c6',
	'sFilename': 'RESTAttachment.json',
}
</pre>
			For all other methods it's either the object (will be converted to string via JSON.stringify) or string
			to be used in the request body or a valid&#160;<code>sys_id</code>&#160;of an attachment [sys_attachment]
			that
			should be used as the request body.
		</li>
		<li><code>oHeader</code>: (Optional) An array (of arrays or objects) or an object containing the key/value
			pairs to be set as header information in the request.</li>
		<li><code>bTestConnection</code>: (Optional) if true does return an object where property "success"
			is&#160;<code>true</code>&#160;if successful or&#160;<code>false</code>&#160;if there was an error or no
			record is found. The
			object also contains a message property with error messages but no further details.
		</li>
		<p><strong>Returns:</strong>&#160;The request result body or a object with the error details.</p>
		<pre>{ 
'success': false, 
'message': sErrorMsg, 
'error_code': sStatus
}
</pre>
		<h1>Script Include: global.GlobalToolsAttachment</h1>
		<p>&#160;</p>
		<h2>getAttachmentsByRecord</h2>
		<p><strong>Purpose:</strong>&#160;This function gets the attachment information for a specific record based on
			the input parameters.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>grRecord</code>: The&#160;<code>glide record</code>&#160;for which the attachments are retrieved.
			</li>
			<li><code>sQuery</code>: (Optional) The query to be applied on
				the&#160;<code>sys_attachment</code>&#160;table.</li>
			<li><code>sReturnType</code>: (Optional) The return type if the attachment information: id, filename or
				object with both as&#160;<code>array</code>&#160;or record as&#160;<code>glide record</code>. Default:
				id</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>array</code>&#160;or&#160;<code>glide
				record</code>&#160;respecting the type
			specified in&#160;<code>sReturnType</code></p>
		<h2>getAttachmentsStartWithFilename</h2>
		<p><strong>Purpose:</strong>&#160;This function gets the attachment information for a specific record and files
			starting with a specific string.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table for which the attachments are retrieved.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record for which the attachments are
				retrieved.
			</li>
			<li><code>sFilename</code>: The filename to be applied as a "file_nameSTARTSWITH" query on
				the&#160;<code>sys_attachment</code>&#160;table.
			</li>
			<li><code>sReturnType</code>: (Optional) The return type if the attachment information: id, filename or
				object with both as&#160;<code>array</code>&#160;or record as&#160;<code>glide record</code>. Default:
				id</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>array</code>&#160;or&#160;<code>glide
				record</code>&#160;respecting the type
			specified in&#160;<code>sReturnType</code></p>
		<h2>getAttachments</h2>
		<p><strong>Purpose:</strong>&#160;This function gets the attachment information for a specific record based and
			a specific query.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table for which the attachments are retrieved.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record for which the attachments are
				retrieved.
			</li>
			<li><code>sQuery</code>: (Optional) The&#160;<code>encoded query</code>&#160;to be applied on
				the&#160;<code>sys_attachment</code>&#160;table.
			</li>
			<li><code>sReturnType</code>: (Optional) The return type if the attachment information: id, filename or
				object with both as&#160;<code>array</code>&#160;or record as&#160;<code>glide record</code>. Default:
				id</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>array</code>&#160;or&#160;<code>glide
				record</code>&#160;respecting the type
			specified in&#160;<code>sReturnType</code></p>
		<h2>readAttachmentStream</h2>
		<p><strong>Purpose:</strong>&#160;This function reads the attachment information for a specific record and
			attachment filename.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table for which the attachment is retrieved.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record for which the attachment is
				retrieved.</li>
			<li><code>sFilename</code>: The filename to be applied as a "file_name=" query on
				the&#160;<code>sys_attachment</code>&#160;table.
			</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;of the attachment content.</p>
		<h2>readAttachmentStreamFromId</h2>
		<p><strong>Purpose:</strong>&#160;This function reads the attachment information for a specific attachment.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the attachment to be retrieved.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;of the attachment content.</p>
		<h2>combineAttachments</h2>
		<p><strong>Purpose:</strong>&#160;This function reads multiple attachments for a specific record and attachments
			that start with a specific filename.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table for which the attachment is retrieved.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record for which the attachment is
				retrieved.</li>
			<li><code>sFilename</code>: The filename to be applied as a "file_nameSTARTSWITH" query on
				the&#160;<code>sys_attachment</code>&#160;table.
			</li>
			<li><code>bReturnJSON</code>: (Optional) Parses the text string to an JSON object.</li>
			<li><code>bDeleteAfterRead</code>: (Optional) If successful deletes the attachments after reading.</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;or&#160;<code>JSON</code>&#160;of the
			combined attachment
			content.</p>
		<h2>getAttachmentSizePerRecord</h2>
		<p><strong>Purpose:</strong>&#160;This function gets the total attachment size information for a specific record
			based and a specific query.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table for which the attachments are retrieved.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record for which the attachments are
				retrieved.</li>
			<li><code>sQuery</code>: (Optional) The&#160;<code>encoded query</code>&#160;to be applied on
				the&#160;<code>sys_attachment</code>&#160;table.</li>
			<li><code>sReturnType</code>: (Optional) The return type if the attachment information: full, compressed or
				object with both. Default: compressed</li>
			<li><code>sNotation</code>: (Optional) The string definining the notation to be used to format the result:
				number (no notation), si (base 1000) or iec (base 1024) Default: si.</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>number</code>,&#160;<code>string</code>&#160;or&#160;<code>object</code>&#160;respecting
			the type specified in&#160;<code>sReturnType</code></p>
		<h2>getAttachmentSize</h2>
		<p><strong>Purpose:</strong>&#160;This function gets the total attachment size information for a specific record
			based and a specific query.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sQuery</code>: (Optional) The&#160;<code>encoded query</code>&#160;to be applied on
				the&#160;<code>sys_attachment</code>&#160;table.</li>
			<li><code>sReturnType</code>: (Optional) The return type if the attachment information: full, compressed or
				object with both. Default: compressed</li>
			<li><code>sNotation</code>: (Optional) The string definining the notation to be used to format the result:
				number (no notation), si (base 1000) or iec (base 1024) Default: si.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>number</code>,&#160;<code>string</code>&#160;or&#160;<code>object</code>&#160;respecting
			the type specified in&#160;<code>sReturnType</code></p>

		<h2>writeAttachment</h2>
		<p><strong>Purpose:</strong>&#160;This function writes an attachment to a specific record.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>grRecord</code>: The&#160;<code>glide record</code>&#160;to which the file is attached in
				the&#160;<code>sys_attachment</code>&#160;table..
			</li>
			<li><code>sFilename</code>: The filename to be set (field&#160;<code>file_name</code>).</li>
			<li><code>sContent</code>: The content of the attachment.</li>
			<li><code>sContentType</code>: (Optional) If&#160;<code>undefined</code>&#160;the string after the last .
				(dot) of the&#160;<code>sFilename</code>&#160;is taken.
			</li>
			<li><code>bBase64</code>: (Optional) Write the content as Base64 encoded string.</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;with the attachment sys_id
			or&#160;<code>undefined</code>&#160;if not successful.</p>
		<h2>writeAttachmentByTableId</h2>
		<p><strong>Purpose:</strong>&#160;This function writes an attachment to a specific record.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table for which the attachment is written.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record for which the attachment is
				written.</li>
			<li><code>sFilename</code>: The filename to be set (field&#160;<code>file_name</code>).</li>
			<li><code>sContent</code>: The content of the attachment.</li>
			<li><code>sContentType</code>: (Optional) If&#160;<code>undefined</code>&#160;the string after the last .
				(dot) of the&#160;<code>sFilename</code>&#160;is taken.
			</li>
			<li><code>bBase64</code>: (Optional) Write the content as Base64 encoded string.</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are hidden from the user.</li>
		</ul>
		<p><strong>Returns:</strong>&#160;The&#160;<code>string</code>&#160;with the attachment sys_id
			or&#160;<code>undefined</code>&#160;if not successful.</p>
		<h2>deleteAttachment</h2>
		<p><strong>Purpose:</strong>&#160;This function deletes a specific attachment on a specific record.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table from which the attachment is deleted.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record from which the attachment is
				deleted.</li>
			<li><code>sFilename</code>: The filename of the attachment to be deleted
				(field&#160;<code>file_name</code>).
			</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<h2>deleteAttachmentsStartWithFilename</h2>
		<p><strong>Purpose:</strong>&#160;This function deletes specific attachments on a specific record.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table from which the attachments are deleted.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record from which the attachments are
				deleted.
			</li>
			<li><code>sFilename</code>: The starting string of the filenames for the attachment to be deleted
				(field&#160;<code>file_name</code>&#160;STARTSWITH).
			</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
		<h2>deleteAttachments</h2>
		<p><strong>Purpose:</strong>&#160;This function deletes specific attachments on a specific record.</p>
		<p><strong>Parameters:</strong></p>
		<ul>
			<li><code>sTable</code>: The glide record table from which the attachments are deleted.</li>
			<li><code>sId</code>: The&#160;<code>sys_id</code>&#160;of the base record from which the attachments are
				deleted.
			</li>
			<li><code>sQuery</code>: The query string to be applied to search for the attachments to be deleted.</li>
			<li><code>bHidden</code>: (Optional) Use&#160;<code>ZZ_YY</code>&#160;prefix on table name for attachments
				that are
				hidden from the user.</li>
		</ul>
	</body>
</j:jelly>]]></html>
        <name>export_control_config_manual</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-02-13 06:49:44</sys_created_on>
        <sys_id>0ab6924e1bd08210e50ddc61ab4bcb71</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>export_control_config_manual</sys_name>
        <sys_package display_value="Export Control Configuration" source="14119e461bd08210e50ddc61ab4bcbb6">14119e461bd08210e50ddc61ab4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="Export Control Configuration">14119e461bd08210e50ddc61ab4bcbb6</sys_scope>
        <sys_update_name>sys_ui_page_0ab6924e1bd08210e50ddc61ab4bcb71</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-02-13 07:37:03</sys_updated_on>
    </sys_ui_page>
</record_update>
